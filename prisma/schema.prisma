// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id   BigInt @id @default(autoincrement())
  name String

  products Product[]
}

enum UserRole {
  SUPER_USER
  INVENTORY
  SELLER
  BUYER
}

model Product {
  id          BigInt    @id @default(autoincrement())
  name        String
  description String?
  slug        String?   @unique
  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  BigInt?

  variants   ProductVariant[]
  promotions ProductPromotion[]
  reviews    Review[]
  images     ProductImage[]
  tags       ProductTag[]
}

model ProductVariant {
  id        BigInt  @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId BigInt
  color     Color?  @relation(fields: [colorId], references: [id])
  colorId   BigInt?
  size      Size?   @relation(fields: [sizeId], references: [id])
  sizeId    BigInt?
  price     Decimal
  stock     Int
  imageUrl  String?

  orderItems OrderItem[]
  inventory  Inventory[]
  transfers  WarehouseTransfer[]
}

model Color {
  id      BigInt  @id @default(autoincrement())
  name    String
  hexCode String?

  variants ProductVariant[]
}

model Size {
  id   BigInt @id @default(autoincrement())
  name String

  variants ProductVariant[]
}

model ProductImage {
  id        BigInt  @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId BigInt
  imageUrl  String
}

model Tag {
  id   BigInt @id @default(autoincrement())
  name String @unique

  productTags ProductTag[]
}

model ProductTag {
  id        BigInt  @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId BigInt
  tag       Tag     @relation(fields: [tagId], references: [id])
  tagId     BigInt
}

model Order {
  id               BigInt   @id @default(autoincrement())
  orderDate        DateTime @default(now())
  customerName     String
  customerEmail    String
  user             User?    @relation(fields: [userId], references: [id])
  userId           BigInt?
  deliveryAddress  String
  phoneNumber      String
  notes            String?
  isRegisteredUser Boolean  @default(false)

  items OrderItem[]
}

model OrderItem {
  id               BigInt         @id @default(autoincrement())
  order            Order          @relation(fields: [orderId], references: [id])
  orderId          BigInt
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
  productVariantId BigInt
  quantity         Int
}

model User {
  id                 BigInt              @id @default(autoincrement())
  name               String
  email              String              @unique
  password           String
  createdAt          DateTime            @default(now())
  role               UserRole
  orders             Order[]
  reviews            Review[]
  requestedTransfers WarehouseTransfer[] @relation("RequestedByUser")
  approvedTransfers  WarehouseTransfer[] @relation("ApprovedByUser")
}

model Promotion {
  id                 BigInt   @id @default(autoincrement())
  name               String
  description        String?
  discountPercentage Decimal
  minPurchaseAmount  Decimal  @default(500.00)
  startDate          DateTime
  endDate            DateTime

  productPromotions ProductPromotion[]
}

model ProductPromotion {
  id          BigInt    @id @default(autoincrement())
  product     Product   @relation(fields: [productId], references: [id])
  productId   BigInt
  promotion   Promotion @relation(fields: [promotionId], references: [id])
  promotionId BigInt
}

model Supplier {
  id          BigInt  @id @default(autoincrement())
  name        String
  contactInfo String?

  inventory Inventory[]
}

model Inventory {
  id               BigInt         @id @default(autoincrement())
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
  productVariantId BigInt
  supplier         Supplier?      @relation(fields: [supplierId], references: [id])
  supplierId       BigInt?
  purchaseDate     DateTime       @default(now())
  quantity         Int
  costPrice        Decimal
  warehouse        Warehouse?     @relation(fields: [warehouseId], references: [id])
  warehouseId      BigInt?
}

model Review {
  id         BigInt   @id @default(autoincrement())
  product    Product  @relation(fields: [productId], references: [id])
  productId  BigInt
  user       User     @relation(fields: [userId], references: [id])
  userId     BigInt
  rating     Int
  comment    String?
  reviewDate DateTime @default(now())
}

model WarehouseTransfer {
  id                BigInt         @id @default(autoincrement())
  productVariant    ProductVariant @relation(fields: [productVariantId], references: [id])
  productVariantId  BigInt
  fromWarehouse     Warehouse?     @relation("FromWarehouse", fields: [fromWarehouseId], references: [id])
  fromWarehouseId   BigInt?
  toWarehouse       Warehouse?     @relation("ToWarehouse", fields: [toWarehouseId], references: [id])
  toWarehouseId     BigInt?
  transferDate      DateTime       @default(now())
  quantity          Int
  requestedByUser   User?          @relation("RequestedByUser", fields: [requestedByUserId], references: [id])
  requestedByUserId BigInt?
  approvedByUser    User?          @relation("ApprovedByUser", fields: [approvedByUserId], references: [id])
  approvedByUserId  BigInt?
  approvedAt        DateTime?
  status            String         @default("pending")
}

model Warehouse {
  id       BigInt  @id @default(autoincrement())
  name     String
  location String?

  inventory     Inventory[]
  fromTransfers WarehouseTransfer[] @relation("FromWarehouse")
  toTransfers   WarehouseTransfer[] @relation("ToWarehouse")
}
