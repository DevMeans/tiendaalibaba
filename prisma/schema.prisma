// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id       String     @id @default(uuid())
  name     String     @unique
  estado   TypeEstado @default(ACTIVO)
  products Product[]
}

enum UserRole {
  SUPER_USER
  INVENTORY
  SELLER
  BUYER
}

model Product {
  id                  String                @id @default(uuid())
  name                String                @unique
  description         String
  slug                String                @unique
  category            Category              @relation(fields: [categoryId], references: [id])
  categoryId          String
  promotions          ProductPromotion[]
  reviews             Review[]
  images              ProductImage[]
  tags                ProductTag[]
  ProductColorVariant ProductColorVariant[]
  ProductSizeVariant  ProductSizeVariant[]
}

model ProductSizeVariant {
  id        String  @id @default(uuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  size      Size    @relation(fields: [sizeId], references: [id])
  sizeId    String
  price     Float
}

enum TypeEstado {
  ACTIVO
  INACTIVO
}

model Color {
  id                  String                @id @default(uuid())
  name                String                @unique
  hexCode             String
  estado              TypeEstado            @default(ACTIVO)
  ProductColorVariant ProductColorVariant[]
}

model Size {
  id                 String               @id @default(uuid())
  name               String               @unique
  estado             TypeEstado           @default(ACTIVO)
  ProductSizeVariant ProductSizeVariant[]
}

model ProductImage {
  id        String  @id @default(uuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  imageUrl  String
}

model ProductColorVariant {
  id        String  @id @default(uuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  color     Color   @relation(fields: [colorId], references: [id])
  colorId   String
  imageUrl  String
}

model Tag {
  id          String       @id @default(uuid())
  name        String       @unique
  estado      TypeEstado   @default(ACTIVO)
  productTags ProductTag[]
}

model ProductTag {
  id        String  @id @default(uuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  tag       Tag     @relation(fields: [tagId], references: [id])
  tagId     String
}

model Order {
  id               String   @id @default(uuid())
  orderDate        DateTime @default(now())
  customerName     String
  customerEmail    String
  user             User?    @relation(fields: [userId], references: [id])
  userId           String?
  deliveryAddress  String
  phoneNumber      String
  notes            String?
  isRegisteredUser Boolean  @default(false)

  items OrderItem[]
}

model OrderItem {
  id       String @id @default(uuid())
  order    Order  @relation(fields: [orderId], references: [id])
  orderId  String
  quantity Int
}

model User {
  id                 String              @id @default(uuid())
  name               String
  email              String              @unique
  password           String
  createdAt          DateTime            @default(now())
  role               UserRole
  orders             Order[]
  reviews            Review[]
  requestedTransfers WarehouseTransfer[] @relation("RequestedByUser")
  approvedTransfers  WarehouseTransfer[] @relation("ApprovedByUser")
}

model Promotion {
  id                 String   @id @default(uuid())
  name               String
  description        String?
  discountPercentage Decimal
  minPurchaseAmount  Decimal  @default(500.00)
  startDate          DateTime
  endDate            DateTime

  productPromotions ProductPromotion[]
}

model ProductPromotion {
  id          String    @id @default(uuid())
  product     Product   @relation(fields: [productId], references: [id])
  productId   String
  promotion   Promotion @relation(fields: [promotionId], references: [id])
  promotionId String
}

model Supplier {
  id          String  @id @default(uuid())
  name        String
  contactInfo String?

  inventory Inventory[]
}

model Inventory {
  id           String     @id @default(uuid())
  supplier     Supplier?  @relation(fields: [supplierId], references: [id])
  supplierId   String?
  purchaseDate DateTime   @default(now())
  quantity     Int
  costPrice    Decimal
  warehouse    Warehouse? @relation(fields: [warehouseId], references: [id])
  warehouseId  String?
}

model Review {
  id         String   @id @default(uuid())
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  rating     Int
  comment    String?
  reviewDate DateTime @default(now())
}

model WarehouseTransfer {
  id                String     @id @default(uuid())
  fromWarehouse     Warehouse? @relation("FromWarehouse", fields: [fromWarehouseId], references: [id])
  fromWarehouseId   String?
  toWarehouse       Warehouse? @relation("ToWarehouse", fields: [toWarehouseId], references: [id])
  toWarehouseId     String?
  transferDate      DateTime   @default(now())
  quantity          Int
  requestedByUser   User?      @relation("RequestedByUser", fields: [requestedByUserId], references: [id])
  requestedByUserId String?
  approvedByUser    User?      @relation("ApprovedByUser", fields: [approvedByUserId], references: [id])
  approvedByUserId  String?
  approvedAt        DateTime?
  status            String     @default("pending")
}

model Warehouse {
  id       String  @id @default(uuid())
  name     String
  location String?

  inventory     Inventory[]
  fromTransfers WarehouseTransfer[] @relation("FromWarehouse")
  toTransfers   WarehouseTransfer[] @relation("ToWarehouse")
}
